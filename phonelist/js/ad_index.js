import { kiemTraRong } from "./ad_validate.js";

var dssp = [];

// Khi trang ƒë∆∞·ª£c t·∫£i l·∫°i, hi·ªÉn th·ªã spinner
document.addEventListener("DOMContentLoaded", () => {
  showSpinner();
  fetchFoodList(); // G·ªçi h√†m ƒë·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m l·∫°i sau khi trang ƒë∆∞·ª£c t·∫£i l·∫°i
});


// Hi·ªÉn th·ªã spinner v√† l√†m m·ªù n·ªôi dung
function showSpinner() {
  var overlay = document.getElementById("overlay");
  overlay.style.display = "block";
}

// ·∫®n spinner v√† kh√¥i ph·ª•c n·ªôi dung b√¨nh th∆∞·ªùng
function hideSpinner() {
  var overlay = document.getElementById("overlay");
  overlay.style.display = "none";
}

//selected Id c·ªßa product ch·ªçn ƒë·ªÉ edit
var selectedId = null;

function renderProductionList(productArr) {
  // X√≥a d·ªØ li·ªáu hi·ªán t·∫°i trong m·∫£ng dssp
  dssp.length = 0;

  var contentHTML = "";
  for (var i = 0; i < productArr.length; i++) {
    var product = productArr[i];
    // Th√™m s·∫£n ph·∫©m v√†o m·∫£ng dssp
    dssp.push(product);
    var trString = `<tr>
            <td>${product.id}</td>
            <td>${product.name}</td>
            <td>${product.price}</td>
            <td>${product.image}</td>
            <td>${product.type}</td>
            <td>${product.quality}</td>
            <td>
                <button onclick="deleteProduct(${product.id})" class="btn btn-warning  ">Delete</button>
                <button onclick="editProduct(${product.id})" class="btn btn-danger">Edit</button>
            </td>
        </tr>`;
    contentHTML += trString;
  }
  document.getElementById("tblDanhSachSP").innerHTML = contentHTML;
}

var nextProductId = 1; // B·∫Øt ƒë·∫ßu t·ª´ ID 1 v√† tƒÉng l√™n sau m·ªói l·∫ßn th√™m s·∫£n ph·∫©m m·ªõi

let originalProductList = []; // Bi·∫øn l∆∞u tr·ªØ danh s√°ch s·∫£n ph·∫©m ban ƒë·∫ßu


axios({
  url: "https://6520dbe6906e276284c4beec.mockapi.io/Products",
  method: "GET",
})
  .then((res) => {
    // Api tr·∫£ v·ªÅ th√†nh c√¥ng
    renderProductionList(res.data);

    // T√¨m gi√° tr·ªã ID l·ªõn nh·∫•t trong danh s√°ch ƒë√£ c√≥
    let maxId = 0;
    res.data.forEach((product) => {
      const productId = parseInt(product.id);
      if (!isNaN(productId) && productId > maxId) {
        maxId = productId;
      }
    });

    // L∆∞u danh s√°ch s·∫£n ph·∫©m ban ƒë·∫ßu v√†o bi·∫øn t·∫°m th·ªùi
    originalProductList = res.data;

    // C·∫≠p nh·∫≠t nextProductId th√†nh gi√° tr·ªã l·ªõn nh·∫•t t√¨m ƒë∆∞·ª£c + 1
    nextProductId = maxId + 1;
  })
  .catch((err) => {
    console.log(err);
  });

// g·ªçi api l·∫•y danh s√°ch s·∫£n ph·∫©m ƒëang c√≥ t·ª´ sever
axios({
  url: "https://6520dbe6906e276284c4beec.mockapi.io/Products",
  method: "GET",
})
  .then((res) => {
    //api tr·∫£ v·ªÅ th√†nh c√¥ng
    renderProductionList(res.data);

    // T√¨m gi√° tr·ªã ID l·ªõn nh·∫•t trong danh s√°ch ƒë√£ c√≥
    let maxId = 0;
    res.data.forEach((product) => {
      const productId = parseInt(product.id);
      if (!isNaN(productId) && productId > maxId) {
        maxId = productId;
      }
    });

    // C·∫≠p nh·∫≠t nextProductId th√†nh gi√° tr·ªã l·ªõn nh·∫•t t√¨m ƒë∆∞·ª£c + 1
    nextProductId = maxId + 1;
  })
  .catch((err) => {
    console.log(err);
  });





async function deleteProduct(id) {
  // Hi·ªÉn th·ªã spinner v√† l√†m m·ªù n·ªôi dung
  showSpinner();

  try {
    const response = await axios.delete(
      `https://6520dbe6906e276284c4beec.mockapi.io/Products/${id}`
    );
    console.log("X√≥a th√†nh c√¥ng", response);
    // Sau khi x√≥a th√†nh c√¥ng, ·∫©n spinner v√† kh√¥i ph·ª•c n·ªôi dung
    hideSpinner();

    fetchFoodList(); // G·ªçi h√†m ƒë·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m l·∫°i sau khi x√≥a
  } catch (error) {
    // X·∫£y ra l·ªói khi x√≥a, sau ƒë√≥ ·∫©n spinner v√† kh√¥i ph·ª•c n·ªôi dung
    hideSpinner();
    console.error("X√≥a th·∫•t b·∫°i", error);
    alert("X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i: " + error.message);
  }
}
window.deleteProduct = deleteProduct;

async function addProduct() {
  // Hi·ªÉn th·ªã spinner v√† l√†m m·ªù n·ªôi dung
  showSpinner();

  try {
    var newProduct = getDataForm();

    // T·∫°o ID cho s·∫£n ph·∫©m m·ªõi v√† c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng kh√°c
    newProduct.id = nextProductId.toString(); // T·∫°o ID cho s·∫£n ph·∫©m m·ªõi
    newProduct.screen = ""; // Th√™m tr∆∞·ªùng screen (m·ª•c n√†y c·∫ßn ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi gi√° tr·ªã th√≠ch h·ª£p)

    //validate new product
    var isValid =
      kiemTraRong(newProduct.name, "TenSP") &&
      kiemTraRong(newProduct.img, "HinhSP") &&
      kiemTraRong(newProduct.price, "GiaSP") &&
      kiemTraRong(newProduct.type, "LoaiSP");
      kiemTraRong(newProduct.quality, "soLuongSP");

    if (!isValid) {
      // n·∫øu c√≥ tr∆∞·ªùng input r·ªóng, hi·ªÉn th·ªã th√¥ng b√°o l·ªói
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin");
      // ·∫©n spinner v√† k·∫øt th√∫c h√†m
      hideSpinner();
      return;
    }

    // Th·ª±c hi·ªán th√™m s·∫£n ph·∫©m m·ªõi v√†o danh s√°ch
    dssp.push(newProduct);

    // S·∫Øp x·∫øp l·∫°i danh s√°ch s·∫£n ph·∫©m theo id
    dssp.sort((a, b) => parseInt(a.id) - parseInt(b.id));

    const response = await axios.post(
      "https://6520dbe6906e276284c4beec.mockapi.io/Products",
      newProduct
    );
    console.log("Th√™m th√†nh c√¥ng", response);
    // Sau khi th√™m th√†nh c√¥ng, ·∫©n spinner v√† kh√¥i ph·ª•c n·ªôi dung
    hideSpinner();

    fetchFoodList(); // G·ªçi h√†m ƒë·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m l·∫°i sau khi th√™m
  } catch (error) {
    // X·∫£y ra l·ªói khi th√™m, sau ƒë√≥ ·∫©n spinner v√† kh√¥i ph·ª•c n·ªôi dung
    hideSpinner();
    console.error("Th√™m th·∫•t b·∫°i", error);
    alert("Th√™m s·∫£n ph·∫©m th·∫•t b·∫°i: " + error.message);
  }
  closeModal();
}
window.addProduct = addProduct;

console.log("üöÄ ~ dssp:", dssp);

function editProduct(id) {
  // Hi·ªÉn th·ªã spinner v√† l√†m m·ªù n·ªôi dung
  showSpinner();

  selectedId = id;
  axios({
    url: `https://6520dbe6906e276284c4beec.mockapi.io/Products/${id}`,
    method: "GET",
  })
    .then((res) => {
      console.log(res);
      $("#myModal").modal("show");
      // ƒê∆∞a data t·ª´ m√°y ch·ªß l√™n form
      showDataForm(res.data);
      // Sau khi l·∫•y th√¥ng tin s·∫£n ph·∫©m th√†nh c√¥ng, ·∫©n spinner
      hideSpinner();
    })
    .catch((err) => {
      console.log(err);
      // X·∫£y ra l·ªói, ·∫©n spinner
      hideSpinner();
    });
}
window.editProduct = editProduct;

async function updateProduct(id) {
  // Hi·ªÉn th·ªã spinner v√† l√†m m·ªù n·ªôi dung
  showSpinner();

  try {
    
    // L·∫•y data v·ª´a ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi ng∆∞·ªùi d√πng t·ª´ form
    var updateProductData = getDataForm();
    const response = await axios.put(
      `https://6520dbe6906e276284c4beec.mockapi.io/Products/${selectedId}`,
      updateProductData
    );
    console.log("S·ª≠a th√†nh c√¥ng", response);
    // Sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng, ·∫©n spinner v√† kh√¥i ph·ª•c n·ªôi dung
    hideSpinner();

    fetchFoodList(); // G·ªçi h√†m ƒë·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m l·∫°i sau khi c·∫≠p nh·∫≠t
  } catch (error) {
    // X·∫£y ra l·ªói khi c·∫≠p nh·∫≠t, sau ƒë√≥ ·∫©n spinner v√† kh√¥i ph·ª•c n·ªôi dung
    hideSpinner();
    console.error("S·ª≠a th·∫•t b·∫°i", error);
    alert("S·ª≠a s·∫£n ph·∫©m th·∫•t b·∫°i: " + error.message);
  }
  closeModal();
}
window.updateProduct = updateProduct;


async function fetchFoodList() {
  try {
    const response = await axios.get(
      "https://6520dbe6906e276284c4beec.mockapi.io/Products"
    );
    renderProductionList(response.data);
    originalProductList = response.data; // L∆∞u tr·ªØ danh s√°ch ban ƒë·∫ßu
    renderProductionList(originalProductList);

    hideSpinner(); // ·∫®n spinner sau khi t·∫£i xong danh s√°ch s·∫£n ph·∫©m
  } catch (err) {
    console.log(err);
    hideSpinner(); // ·∫®n spinner n·∫øu c√≥ l·ªói x·∫£y ra
  }
}
fetchFoodList()
//---------------------T√¨m ki·∫øm----------------------------------
function searchButton() {
   // Hi·ªÉn th·ªã spinner v√† l√†m m·ªù n·ªôi dung
   showSpinner();
  var keyword = document.getElementById("searchInput").value.toLowerCase();
  var results = searchProductsByKeyword(keyword);
  renderProductionList(results);
  // Sau khi t√¨m ki·∫øm xong, ·∫©n spinner v√† kh√¥i ph·ª•c n·ªôi dung
  hideSpinner();
}
window.searchButton = searchButton;

function searchProductsByKeyword(keyword) {
  // T·∫°o m·ªôt m·∫£ng m·ªõi ƒë·ªÉ l∆∞u tr·ªØ c√°c s·∫£n ph·∫©m ph√π h·ª£p v·ªõi t·ª´ kh√≥a
  var searchResults = [];

  // S·ª≠ d·ª•ng danh s√°ch s·∫£n ph·∫©m ban ƒë·∫ßu ƒë·ªÉ t√¨m ki·∫øm
  var productListToSearch = originalProductList;

  // L·∫∑p qua danh s√°ch s·∫£n ph·∫©m ban ƒë·∫ßu ƒë·ªÉ t√¨m ki·∫øm
  for (var i = 0; i < productListToSearch.length; i++) {
    var product = productListToSearch[i];
    if (product.name.toLowerCase().includes(keyword)) {
      searchResults.push(product);
    }
  }

  return searchResults;
}


//------------------S·∫Øp x·∫øp-----------------------------------

// Khai b√°o m·ªôt bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp
let sortedProducts = [];

// H√†m s·∫Øp x·∫øp danh s√°ch s·∫£n ph·∫©m
function sortProducts() {
  // Hi·ªÉn th·ªã spinner v√† l√†m m·ªù n·ªôi dung
  showSpinner();

  var sortSelect = document.getElementById("sortSelect");
  var sortOrder = sortSelect.value;
  
  if (sortOrder === "") {
    // N·∫øu ng∆∞·ªùi d√πng ch·ªçn "S·∫Øp x·∫øp theo gi√°", hi·ªÉn th·ªã danh s√°ch ban ƒë·∫ßu
    renderProductionList(originalProductList);
    
    // Sau khi s·∫Øp x·∫øp xong, ·∫©n spinner v√† kh√¥i ph·ª•c n·ªôi dung
    hideSpinner();
    
    return;
  }
  
  if (sortOrder === "asc") {
    // S·∫Øp x·∫øp danh s√°ch s·∫£n ph·∫©m theo gi√° tƒÉng d·∫ßn
    sortedProducts = dssp.slice().sort((a, b) => {
      const priceA = parseFloat(a.price);
      const priceB = parseFloat(b.price);
      return priceA - priceB;
    });
    console.log("üöÄ ~ sortedProducts:", sortedProducts);
  }
  
  if (sortOrder === "desc") {
    // S·∫Øp x·∫øp danh s√°ch s·∫£n ph·∫©m theo gi√° gi·∫£m d·∫ßn
    sortedProducts = dssp.slice().sort((a, b) => {
      const priceA = parseFloat(a.price);
      const priceB = parseFloat(b.price);
      return priceB - priceA;
    });
  }
  // G·ªçi h√†m ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp
  renderProductionList(sortedProducts);

  // Sau khi s·∫Øp x·∫øp xong, ·∫©n spinner v√† kh√¥i ph·ª•c n·ªôi dung
  hideSpinner();
}
window.sortProducts = sortProducts;

