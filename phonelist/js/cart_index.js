// Khi trang ƒë∆∞·ª£c t·∫£i l·∫°i, hi·ªÉn th·ªã spinner
document.addEventListener("DOMContentLoaded", () => {
  renderItemList();
  hideSpinner(); // ·∫®n spinner sau khi danh s√°ch s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c t·∫£i xong
});

import productList from "./index.js";
import { showSpinner } from "./index.js";
import { hideSpinner } from "./index.js";
import { productList_localStorage } from "./index.js";

// Trong t·ªáp cart_index.js
let tableIdCounter = 0;

// C√°c m√£ kh√°c ·ªü ƒë√¢y

export { tableIdCounter };

// B√¢y gi·ªù b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng productList trong cart_index.js
console.log(productList);

export function updateCartCount() {
  const totalQuantity = productList.reduce(
    (total, item) => total + item.quality,
    0
  );
  const cartCountElement = document.getElementById("cart-count");
  cartCountElement.textContent = totalQuantity;
}

window.updateCartCount = updateCartCount;

export function renderItemList() {
  // Hi·ªÉn th·ªã spinner v√† l√†m m·ªù n·ªôi dung
  showSpinner();

  var contentHTML = "";
  var tblGioHang = document.getElementById("tblGioHang"); // Ki·ªÉm tra ph·∫ßn t·ª≠
  if (tblGioHang) {
    for (var i = 0; i < productList.length; i++) {
      var item = productList[i];
      // T·∫°o ID duy nh·∫•t cho b·∫£ng
      var tableId = `itemTable${i}`;
      var tableRowId = `itemTableRow${i}`;
      updateCartCount();
      var trString = `<tr id="${tableRowId}">
        <td>${i + 1}</td>
        <td>${item.name}</td>
        <td>${item.price}</td>
        <td>${item.type}</td>
        <td>${item.quality}</td>
        <td>
        <button onclick="addItem('${tableRowId}')" class="btn btn-success">+</button>
        <button onclick="subItem('${tableRowId}')" class="btn btn-warning pr-3">-</button>
        <button onclick="deleteItem('${tableRowId}')"  class="btn btn-danger pr-3">X</button>
        </td>
    </tr>`;
      contentHTML += trString;
    }
    document.getElementById("tblGioHang").innerHTML = contentHTML;
    // ·∫®n spinner v√† kh√¥i ph·ª•c n·ªôi dung b√¨nh th∆∞·ªùng
    hideSpinner();
  } else {
    console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ c√≥ ID l√† 'tblGioHang'.");
  }
}

// S·ª≠ d·ª•ng h√†m renderItemList v√† truy·ªÅn v√†o productList
renderItemList();

export function updateTotalPrice() {
  const totalPriceElement = document.getElementById("total-price"); // Ki·ªÉm tra ph·∫ßn t·ª≠
  console.log("üöÄ ~ totalPriceElement:", totalPriceElement);
  if (totalPriceElement) {
    // T√¨m th·∫•y ph·∫ßn t·ª≠, c·∫≠p nh·∫≠t thu·ªôc t√≠nh 'textContent'
    const totalPrice = productList.reduce((total, item) => {
      return total + parseFloat(item.price) * item.quality;
    }, 0);
    totalPriceElement.textContent = `$${totalPrice.toLocaleString(undefined, {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    })}`;
  } else {
    console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ c√≥ ID l√† 'total-price'.");
  }
}

// G·ªçi h√†m updateTotalPrice ƒë·ªÉ c·∫≠p nh·∫≠t t·ªïng gi√° tr·ªã ban ƒë·∫ßu
updateTotalPrice();


// X√≥a gi·ªè h√†ng v√† c·∫≠p nh·∫≠t giao di·ªán
const ThanhToan = () => {
  productList.length = 0; // Set m·∫£ng gi·ªè h√†ng v·ªÅ r·ªóng
  updateCartCount(); // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
  renderItemList(); // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng
  updateTotalPrice(); // C·∫≠p nh·∫≠t t·ªïng gi√° tr·ªã

  // X√≥a d·ªØ li·ªáu trong local storage 
  localStorage.removeItem(productList_localStorage); // X√≥a d·ªØ li·ªáu gi·ªè h√†ng trong local storage
};
window.ThanhToan = ThanhToan;

